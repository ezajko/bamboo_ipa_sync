#!/usr/bin/env python
#
# The script fetches data from Bamboo and compares it with data in FreeIPA's LDAP directory.
# Any changes to Bamboo records are synced to LDAP directory.
# Any accounts that do not exist in LDAP are created as FreeIPA stage accounts.
#
# Author: Peter Pakos <peter.pakos@wandisco.com>

from __future__ import print_function

import base64
import os
import sys
import urllib2
import xml.etree.ElementTree
import argparse
import ldap.modlist
import prettytable

import WDMail
from config import CONFIG


class Main(object):
    _version = '16.8.7'
    _name = os.path.splitext(os.path.basename(os.path.realpath(__file__)))[0]

    def __init__(self):
        self._parser, self._args = self._parse_args()
        self._bamboo_url = CONFIG.BAMBOO_URL
        self._bamboo_api_key = CONFIG.BAMBOO_API_KEY
        self._ipa_server = CONFIG.IPA_SERVER
        self._bind_dn = CONFIG.BIND_DN
        self._bind_pw = CONFIG.BIND_PW
        self._bamboo_exclude_list = CONFIG.BAMBOO_EXCLUDE_LIST
        self._mail = WDMail.WDMail()

        if self._args.bamboo:
            self._bamboo = Bamboo(self._bamboo_url, self._bamboo_api_key)
            self._bamboo.display_data()
        if self._args.ldap:
            self._ldap = Ldap(self._ipa_server, self._bind_dn, self._bind_pw)
            self._ldap.display_data()
        if self._args.bamboo or self._args.ldap:
            exit()
        if self._args.sync:
            self._bamboo = Bamboo(self._bamboo_url, self._bamboo_api_key)
            self._ldap = Ldap(self._ipa_server, self._bind_dn, self._bind_pw)
            self.sync_data()
            exit()
        self._parser.print_help()

    def _parse_args(self):
        parser = argparse.ArgumentParser(description='A tool to synchronise FreeIPA with Bamboo HR')
        parser.add_argument('--version', action='version', version='%s %s' % (self._name, self._version))
        parser.add_argument('-l', '--ldap', help='print LDAP data and exit', dest='ldap', action='store_true')
        parser.add_argument('-b', '--bamboo', help='print Bamboo data and exit', dest='bamboo', action='store_true')
        parser.add_argument('-s', '--sync', help='synchronise LDAP with Bamboo', dest='sync', action='store_true')
        return parser, parser.parse_args()

    @staticmethod
    def die(message=None, code=1):
        if message is not None:
            print(message, file=sys.stderr)
        exit(code)

    def sync_data(self):
        directory = self._bamboo.get_directory()
        for bamboo_id, bamboo_fields in directory.items():
            bamboo_mail = bamboo_fields['workEmail']
            if bamboo_mail is not None and bamboo_mail not in self._bamboo_exclude_list:
                bamboo_first_name = bamboo_fields['firstName']
                bamboo_last_name = bamboo_fields['lastName']
                bamboo_uid = bamboo_first_name.lower() + '.' + bamboo_last_name.lower()
                bamboo_job_title = bamboo_fields['jobTitle']
                bamboo_mobile_phone = bamboo_fields['mobilePhone']
                bamboo_dept = bamboo_fields['department']
                bamboo_division = bamboo_fields['division']
                result = self._ldap.mail_exists(bamboo_mail)
                exists = False
                exists_uid = None
                printed = False
                if len(result) == 0:
                    printed = True
                    mail_uid = bamboo_mail.partition('@')[0]
                    print('New Bamboo account: %s %s (%s)' % (bamboo_first_name, bamboo_last_name,
                                                              bamboo_mail))
                    if not exists and self._ldap.user_exists(bamboo_uid):
                        exists = 'Active'
                        exists_uid = bamboo_uid
                    if not exists and self._ldap.user_exists(bamboo_uid, 'stage'):
                        exists = 'Stage'
                        exists_uid = bamboo_uid
                    if not exists and self._ldap.user_exists(bamboo_uid, 'preserved'):
                        exists = 'Preserved'
                        exists_uid = bamboo_uid
                    if bamboo_uid != mail_uid:
                        if not exists and self._ldap.user_exists(mail_uid):
                            exists = 'Active'
                            exists_uid = mail_uid
                        if not exists and self._ldap.user_exists(mail_uid, 'stage'):
                            exists = 'Stage'
                            exists_uid = mail_uid
                        if not exists and self._ldap.user_exists(mail_uid, 'preserved'):
                            exists = 'Preserved'
                            exists_uid = mail_uid
                    bamboo_termination_date = self._bamboo.fetch_field(bamboo_id, ['terminationDate'])
                    if bamboo_termination_date and bamboo_termination_date != '0000-00-00':
                            print('User leaving on %s, skipping account creation\n' % bamboo_termination_date)
                            continue
                    if exists:
                        print('%s LDAP account %s already exists, skipping account creation\n' % (exists, exists_uid))
                        continue
                    else:
                        fields = self._bamboo.fetch_field(bamboo_id, [
                            'hireDate',
                            'homeEmail',
                            'homePhone',
                            'supervisor',
                            'supervisorEid',
                            'customonboardingNotes',
                            'customrequestedPhone',
                            'customrequestedLaptop',
                            'customrequestedMonitor',
                            'location'
                        ])
                        supervisor_email = self._bamboo.fetch_field(fields['supervisorEid'], ['workEmail'])
                        print('Creating stage LDAP account %s: ' % bamboo_uid, end='')
                        if self._ldap.add_user(
                            bamboo_uid,
                            bamboo_id,
                            bamboo_first_name,
                            bamboo_last_name,
                            bamboo_dept,
                            bamboo_job_title,
                            bamboo_mobile_phone,
                            bamboo_mail,
                            bamboo_division,
                            supervisor_email.partition('@')[0]
                        ):
                            print('OK')
                            user_created = True
                        else:
                            print('FAIL')
                            user_created = False
                        print('Sending New Starter Notification: ', end='')
                        message = '''<strong>Personal Information</strong>
Name: %s %s
Home phone: %s
Home email: %s
Start Date: %s

<strong>Department Information</strong>
Location: %s
Department: %s
Manager Name: %s
Manager Email: %s

<strong>Requirements</strong>
Phone: %s
Laptop: %s
Monitor: %s

<strong>Onboarding Notes</strong>
%s

<strong>LDAP uid:</strong> %s

<strong>Stage LDAP user created:</strong> %s
''' % (
                            bamboo_first_name,
                            bamboo_last_name,
                            fields['homePhone'],
                            fields['homeEmail'],
                            fields['hireDate'],
                            fields['location'],
                            bamboo_dept,
                            fields['supervisor'],
                            supervisor_email,
                            fields['customrequestedPhone'],
                            fields['customrequestedLaptop'],
                            fields['customrequestedMonitor'],
                            fields['customonboardingNotes'],
                            bamboo_uid,
                            'YES' if user_created else 'NO'
                        )

                        if self._mail.send(
                                supervisor_email,
                                ['it@wandisco.com'],
                                'New Starter Notification: %s %s' % (bamboo_first_name, bamboo_last_name),
                                message,
                                cc=[supervisor_email],
                                html=True
                        ) == 202:
                            print('OK')
                        else:
                            print('FAIL')
                elif len(result) == 1:
                    for dn, attrs in result.items():
                        uid = attrs.get('uid')
                        mobile = attrs.get('mobile')
                        title = attrs.get('title')
                        eid = attrs.get('employeeNumber')
                        dept = attrs.get('departmentNumber')
                        division = attrs.get('ou')
                        phone = attrs.get('telephoneNumber')
                        # manager_dn = attrs.get('manager')
                        if type(uid) is list:
                            uid = uid[0]
                        if type(mobile) is list:
                            mobile = mobile[0]
                        if type(title) is list:
                            title = title[0]
                        if type(eid) is list:
                            eid = eid[0]
                        if type(dept) is list:
                            dept = dept[0]
                        if type(division) is list:
                            division = division[0]
                        if type(phone) is list:
                            phone = phone[0]
                        # if type(manager_dn) is list:
                        #    manager_dn = manager_dn[0]

                        if bamboo_mobile_phone != mobile:
                            printed = True
                            print('%s: updating mobile from \'%s\' to \'%s\': '
                                  % (uid, mobile, bamboo_mobile_phone), end='')
                            if self._ldap.modify(dn, 'mobile', mobile, bamboo_mobile_phone):
                                print('OK')
                            else:
                                print('FAIL')

                        if bamboo_mobile_phone != phone:
                            printed = True
                            print('%s: updating telephoneNumber from \'%s\' to \'%s\': '
                                  % (uid, phone, bamboo_mobile_phone), end='')
                            if self._ldap.modify(dn, 'telephoneNumber', phone, bamboo_mobile_phone):
                                print('OK')
                            else:
                                print('FAIL')

                        if bamboo_job_title != title:
                            printed = True
                            print('%s: updating title from \'%s\' to \'%s\': '
                                  % (uid, title, bamboo_job_title), end='')
                            if self._ldap.modify(dn, 'title', title, bamboo_job_title):
                                print('OK')
                            else:
                                print('FAIL')

                        if bamboo_id != eid:
                            printed = True
                            print('%s: updating employeeNumber from \'%s\' to \'%s\': '
                                  % (uid, eid, bamboo_id), end='')
                            if self._ldap.modify(dn, 'employeeNumber', eid, bamboo_id):
                                print('OK')
                            else:
                                print('FAIL')

                        if bamboo_dept != dept:
                            printed = True
                            print('%s: updating departmentNumber from \'%s\' to \'%s\': '
                                  % (uid, dept, bamboo_dept), end='')
                            if self._ldap.modify(dn, 'departmentNumber', dept, bamboo_dept):
                                print('OK')
                            else:
                                print('FAIL')

                        if bamboo_division != division:
                            printed = True
                            print('%s: updating ou from \'%s\' to \'%s\': '
                                  % (uid, division, bamboo_division), end='')
                            if self._ldap.modify(dn, 'ou', division, bamboo_division):
                                print('OK')
                            else:
                                print('FAIL')

                else:
                    printed = True
                    print('More than one entry found in LDAP for email %s' % bamboo_mail, file=sys.stderr)
                if printed:
                    print()


class Bamboo(object):
    def __init__(self, url, api_key):
        self._directory = {}
        self._url = url
        self._api_key = api_key
        self._fetch_directory()

    def get_directory(self):
        return self._directory

    def _fetch(self, url):
        request = urllib2.Request(self._url + url)
        base64string = base64.encodestring('%s:x' % (
            self._api_key
        )).replace('\n', '')
        request.add_header('Authorization', 'Basic %s' % base64string)
        result = None
        try:
            result = urllib2.urlopen(request)
        except urllib2.HTTPError as err:
            Main.die('Failed to fetch Bamboo data (HTTP Error Code %s)' % err.code)
        except urllib2.URLError as err:
            Main.die('Failed to fetch Bamboo data (URL Error %s)' % err.reason)
        except ValueError:
            Main.die('Failed to fetch Bamboo data (Incorrect API URL)')
        return xml.etree.ElementTree.fromstring(result.read())

    def _fetch_directory(self):
        directory = self._fetch("/directory/")
        for employee in directory.iter('employee'):
            fields = {}
            for field in employee.iter('field'):
                fields[field.attrib['id']] = field.text
            self._directory.update({employee.attrib['id']: fields})
        if len(self._directory) == 0:
            Main.die('Bamboo data set is empty')

    def display_data(self):
        table = prettytable.PrettyTable(['ID', 'First', 'Last', 'Department', 'Job title', 'Mobile', 'Email',
                                         'Division'], sortby='Last')
        table.align = 'l'
        number = 0
        for eid, fields in self._directory.items():
            number += 1
            table.add_row([
                eid,
                fields['firstName'],
                fields['lastName'],
                fields['department'],
                fields['jobTitle'],
                fields['mobilePhone'],
                fields['workEmail'],
                fields['division']
            ])
        print(table)

    def fetch_field(self, eid, field_list):
        if type(field_list) is not list:
            field_list = [field_list]
        result = {}
        fields = self._fetch("/%s?fields=%s" % (eid, ','.join(field_list)))
        for f in fields.iter('field'):
            result[f.attrib['id']] = f.text
        if len(field_list) == 1 and len(result) == 1:
            return result[field_list[0]]
        else:
            return result


class Ldap(object):
    def __init__(self, ipa_server, bind_dn, bind_pw):
        self._ipa_server = ipa_server
        self._bind_dn = bind_dn
        self._bind_pw = bind_pw
        self._directory = {}
        self._url = 'ldaps://' + ipa_server
        self._base_dn = 'dc=' + ipa_server.partition('.')[2].replace('.', ',dc=')
        self._active_user_base = 'cn=users,cn=accounts,' + self._base_dn
        self._stage_user_base = 'cn=staged users,cn=accounts,cn=provisioning,' + self._base_dn
        self._preserved_user_base = 'cn=deleted users,cn=accounts,cn=provisioning,' + self._base_dn
        self._con = None
        self._fetch_directory()

    def __del__(self):
        self._con.unbind()

    def _bind(self):
        self._con = ldap.initialize(self._url)
        try:
            self._con.simple_bind_s(self._bind_dn, self._bind_pw)
        except (
            ldap.SERVER_DOWN,
            ldap.NO_SUCH_OBJECT,
            ldap.INVALID_CREDENTIALS
        ) as err:
            Main.die('Bind error: %s' % err.message['desc'])

    def _search(self, base, scope, fltr, attrs):
        return self._con.search_s(base, scope, fltr, attrs)

    def _fetch_directory(self):
        self._bind()
        for dn, attrs in self._search(
                self._active_user_base,
                ldap.SCOPE_SUBTREE,
                '(uid=*)',
                ['*']
        ):
            self._directory.update({dn: attrs})

    def get_directory(self):
        return self._directory

    def display_data(self):
        table = prettytable.PrettyTable(['ID', 'First', 'Last', 'Department', 'Job title', 'Mobile', 'Email',
                                         'Division'], sortby='Last')
        table.align = 'l'
        for dn, attrs in self.get_directory().iteritems():
            eid = attrs.get('employeeNumber')
            given_name = attrs.get('givenName')
            sn = attrs.get('sn')
            ou = attrs.get('ou')
            title = attrs.get('title')
            mobile = attrs.get('mobile')
            mail = attrs.get('mail')
            dept = attrs.get('departmentNumber')
            if type(eid) is list:
                eid = ','.join(eid)
            if type(given_name) is list:
                given_name = ','.join(given_name)
            if type(sn) is list:
                sn = ','.join(sn)
            if type(dept) is list:
                dept = ','.join(dept)
            if type(ou) is list:
                ou = ','.join(ou)
            if type(title) is list:
                title = ','.join(title)
            if type(mobile) is list:
                mobile = ','.join(mobile)
            if type(mail) is list:
                mail = ','.join(mail)
            table.add_row([
                eid,
                given_name,
                sn,
                dept,
                title,
                mobile,
                mail,
                ou
            ])
        print(table)

    def mail_exists(self, mail):
        result = {}
        for dn, attrs in self.get_directory().iteritems():
            mail_list = attrs.get('mail')
            if mail_list is not None:
                mail_list = [e.lower() for e in mail_list]
                if str(mail).lower() in mail_list:
                    result.update({dn: attrs})
        return result

    def user_exists(self, uid, category='active'):
        if category == 'stage':
            base = self._stage_user_base
        elif category == 'preserved':
            base = self._preserved_user_base
        else:
            base = self._active_user_base
        result = self._search(
            base,
            ldap.SCOPE_SUBTREE,
            '(uid=%s)' % uid,
            ['dn']
        )
        result = len(result)
        if result == 0:
            return False
        elif result == 1:
            return True

    def add_user(self, uid, bamboo_id, first, last, dept, title, mobile, mail, division, manager_uid):
        dn = 'uid=%s,%s' % (uid, self._stage_user_base)
        manager_dn = 'uid=%s,%s' % (manager_uid, self._active_user_base) if self.user_exists(manager_uid) else ''
        attrs = dict()
        attrs['objectclass'] = ['top', 'posixaccount', 'person', 'inetorgperson', 'organizationalperson']
        attrs['cn'] = first + ' ' + last
        attrs['givenName'] = first
        attrs['sn'] = last
        attrs['uid'] = uid
        attrs['uidNumber'] = '-1'
        attrs['gidNumber'] = '707'
        attrs['title'] = title
        attrs['mobile'] = mobile if mobile else ''
        attrs['telephoneNumber'] = mobile if mobile else ''
        attrs['mail'] = mail
        attrs['homeDirectory'] = '/home/' + uid
        attrs['loginShell'] = '/usr/sbin/nologin'
        attrs['employeeNumber'] = bamboo_id
        attrs['departmentNumber'] = dept
        attrs['ou'] = division
        attrs['manager'] = manager_dn
        ldif = ldap.modlist.addModlist(attrs)
        try:
            self._con.add_s(dn, ldif)
        except ldap.LDAPError:
            return False
        return True

    def modify(self, dn, attr, old_value, new_value):
        if not old_value:
            old_value = ''
        if not new_value:
            new_value = ''
        old = {attr: old_value}
        new = {attr: new_value}
        ldif = ldap.modlist.modifyModlist(old, new)

        try:
            self._con.modify_s(dn, ldif)
        except ldap.LDAPError:
            return False

        return True


if __name__ == '__main__':
    try:
        main = Main()
    except KeyboardInterrupt:
        print('\nCancelling...')
